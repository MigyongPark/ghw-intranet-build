@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@using Lucene.Net;
@using Examine;
@using Examine.LuceneEngine.SearchCriteria;
@using USNStarterKit.USNBusinessLogic;

@{
    IPublishedContent homeNode = Model.Content.AncestorOrSelf(1);
    var settingsFolder = Umbraco.TypedContent(homeNode.GetProperty("websiteConfigurationNode").Value);
    var globalSettings = settingsFolder.Children.Where(x => x.IsDocumentType("USNGlobalSettings")).First();

    if (globalSettings.HasValue("searchResultsPage") && globalSettings.HasValue("examineSearchProviderName"))
    { 
        	
        int pageSize = Convert.ToInt32(Model.Content.GetProperty("searchResultsPageSize").Value); // How many items per page
        int page; // The page we are viewing
        string originalSearchTerm = "";
        string searchTerm = "";
    
        if(!String.IsNullOrEmpty(Context.Request.QueryString["search_field"]))
        {
            var regex = new System.Text.RegularExpressions.Regex(@"[^\w\s-]");
        
            originalSearchTerm = Request.QueryString["search_field"].Trim();
            searchTerm = regex.Replace(originalSearchTerm, "");
        }
        /* Set up parameters */

        if (!int.TryParse(Request.QueryString["page"], out page))
        {
            page = 1;
        }

        /* This is your basic query to select the nodes you want */

        Examine.Providers.BaseSearchProvider baseSearchProvider = Examine.ExamineManager.Instance.SearchProviderCollection[globalSettings.GetProperty("examineSearchProviderName").Value.ToString()];
        IEnumerable<SearchResult> nodes = null;
        //ISearchResults nodes = null;
        Lucene.Net.Search.Searcher luceneSearcher = null;
        int totalNodes = 0;
        int totalPages = 0;

        if (!String.IsNullOrEmpty(searchTerm))
        {
            //nodes = baseSearchProvider.Search(searchTerm, true);
            var searchCriteria = Examine.ExamineManager.Instance.CreateSearchCriteria(Examine.SearchCriteria.BooleanOperation.Or);
        
            //Boost matches that contain all search terms higher
            var luceneStringNodeName = "nodeName:";
            luceneStringNodeName += "(+" + searchTerm.Replace(" ", " +") + ")^5 ";
            luceneStringNodeName += "nodeName:" + searchTerm;

            //Boost matches that contain all search terms higher
            var luceneStringBodyText = "bodyText:";
            luceneStringBodyText += "(+" + searchTerm.Replace(" ", " +") + ")^5 ";
            luceneStringBodyText += "bodyText:" + searchTerm;

            var query = searchCriteria.RawQuery(luceneStringNodeName + " OR " + luceneStringBodyText);

            var results = baseSearchProvider.Search(query); //.OrderByDescending(x => x.Score)
            luceneSearcher = ((Examine.LuceneEngine.SearchResults)results).LuceneSearcher;
            nodes = results.OrderByDescending(x => x.Score);

            totalNodes = nodes.Count();
            totalPages = (int)Math.Ceiling((double)totalNodes / (double)pageSize);

            /* Bounds checking */

            if (page > totalPages)
            {
                page = totalPages;
            }
            else if (page < 1)
            {
                page = 1;
            }
        }
    
        if (totalNodes == 0)
        {
            <p>@umbraco.library.GetDictionaryItem("USN Search Results Nothing Found")</p>
        }
        else
        {
            if(page == 1)
            {
                //Please not the dictionary item should have a {0} and {1} placeholder for string formatting.
                string searchResultsFeedback = umbraco.library.GetDictionaryItem("USN Search Results Feedback");
                searchResultsFeedback = String.Format(searchResultsFeedback, originalSearchTerm, totalNodes);
                
                <div id="searchResultsIntro">@Html.Raw(searchResultsFeedback)</div>
            }
            <div class="listing search">
                @foreach (var item in nodes.Skip((page - 1) * pageSize).Take(pageSize))
                {
                    <div class="item">
                            <a href="@Umbraco.NiceUrl(Convert.ToInt32(@item.Fields["id"]))">
                                <p class="heading">@item.Fields["nodeName"]</p>
                            </a>
                        @{
                            string fieldName = "bodyText";
                            string searchHighlight = "";

                            if (item.Fields.ContainsKey(fieldName))
                            {
                                string fieldValue = item.Fields[fieldName];
                                searchHighlight = USNLuceneHelper.Instance.GetHighlight(fieldValue, fieldName, luceneSearcher, searchTerm);

                                if (String.IsNullOrEmpty(searchHighlight))
                                {
                                    searchHighlight = Umbraco.Truncate(fieldValue, 100).ToString();
                                }
                                
                                <div class="text">@Html.Raw(searchHighlight)</div>
                            }
										
                        }
                    </div>   
                }
            </div>
            
            @RenderPagination(page, totalNodes, pageSize)
        }
    }
}


@helper RenderPagination(int page, int postCount, int itemsPerPage)
{
    int pages = (int)Math.Ceiling((double)postCount / (double)itemsPerPage);

    string url = Request.Url.ToString();
    string querystring = Request.Url.Query;

    int pagesPerGroup = 10;

    if (pages > 1)
    {
        <nav id="pagination" class="text-center">
            <ul class="pagination">
                @* render prev link *@
                @if (page > 1)
                {
                    url = url.ReplaceQueryStringItem("page", (page - 1).ToString());
                    <li class="prev">
                        <a href="@url" aria-label="Previous" title="@umbraco.library.GetDictionaryItem("USN Listing Navigation Previous")">&#60;<span class="hidden">@umbraco.library.GetDictionaryItem("USN Listing Navigation Previous")</span></a>
                    </li>

                    if (page > pagesPerGroup)
                    {
                        if (page % pagesPerGroup == 0)
                        {
                            url = url.ReplaceQueryStringItem("page", (page - pagesPerGroup).ToString());
                        }
                        else
                        {
                            url = url.ReplaceQueryStringItem("page", ((page / pagesPerGroup) * pagesPerGroup).ToString());
                        }

                        <li class="hidden-xs"><a href="@url">...</a></li>
                    }
                }
                @* render page links *@
                @{
                    int pagesCount = 0;
                    int startPage = 1;


                    if (page <= pagesPerGroup)
                    {
                        startPage = 1;
                    }
                    else if (page % pagesPerGroup > 0)
                    {
                        startPage = page - (page % pagesPerGroup) + 1;
                    }
                    else if (page % pagesPerGroup == 0)
                    {
                        startPage = (page - pagesPerGroup) + 1;
                    }

                    for (int i = startPage; i < pages + 1; i++)
                    {
                        if (pagesCount == pagesPerGroup)
                        {
                            break;
                        }
                        url = url.ReplaceQueryStringItem("page", i.ToString());
                        string pageClass = i == page ? "active" : string.Empty;

                        <li class="hidden-xs @pageClass">
                            @if (page == i)
                            {
                                <a href="@url" class="disabled">@i<span class="sr-only">(current)</span></a>
                            }
                            else
                            {
                                <a href="@url">@i</a>
                            }
                        </li>

                            pagesCount += 1;
                    }

                }
                @{

                int totalGroups = 0;

                if (pages % pagesPerGroup == 0)
                {
                    totalGroups = pages / pagesPerGroup;
                }
                else
                {
                    totalGroups = pages / pagesPerGroup + 1;
                }

                int currentGroup = 0;

                if (page % pagesPerGroup == 0)
                {
                    currentGroup = page / pagesPerGroup;
                }
                else
                {
                    currentGroup = page / pagesPerGroup + 1;
                }


                if (totalGroups != currentGroup)
                {

                    if (page % pagesPerGroup == 0)
                    {
                        url = url.ReplaceQueryStringItem("page", (page + 1).ToString());
                    }
                    else
                    {
                        int liPageNumber = (((page / pagesPerGroup) + 1) * pagesPerGroup) + 1;
                        url = url.ReplaceQueryStringItem("page", liPageNumber.ToString());
                    }

                    <li class="hidden-xs">
                        <a href="@url">...</a>
                    </li>
                }
                }

                @if (page < Math.Ceiling((double)postCount / itemsPerPage))
                {
                    url = url.ReplaceQueryStringItem("page", (page + 1).ToString());
                    @* render next link *@
                    <li class="next">
                        <a href="@url" aria-label="Next" title="@umbraco.library.GetDictionaryItem("USN Listing Navigation Next")"><span class="hidden">@umbraco.library.GetDictionaryItem("USN Listing Navigation Next")</span>&#62;</a>
                    </li>
                }
            </ul>
        </nav>
    }
}

