@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@using USN.UrlPicker.Umbraco.Models;
@using USN.Heading.Umbraco.Models;

@{
    <!-- BANNER -->
    <section class="content apc banner no-padding">

        @if (Model.Content.GetPropertyValue<bool>("displayHeaderImageSection"))
        {
            string parallaxClass = String.Empty;

            if (Model.Content.GetPropertyValue<bool>("headerParallax"))
            {
                parallaxClass = "parallax";
            }

            string animateClass = "";

            if (Model.Content.GetPropertyValue<bool>("headerAnimate"))
            {
                animateClass = "os-animation";
            }

            string bannerStyle = "medium";
            int imgHeight = 700;

            if (Model.Content.HasValue("headerStyle"))
            {
                switch (Model.Content.GetProperty("headerStyle").Value.ToString())
                {
                    case "Short":
                        bannerStyle = "short";

                        if (parallaxClass != String.Empty)
                        { imgHeight = 1600; }
                        else
                        { imgHeight = 500; }

                        break;
                    case "Medium":
                        bannerStyle = "medium";

                        if (parallaxClass != String.Empty)
                        { imgHeight = 1600; }
                        else
                        { imgHeight = 700; }

                        break;
                    case "Takeover":
                        bannerStyle = "takeover";
                        imgHeight = 1600;
                        break;
                    default:
                        bannerStyle = "medium";

                        if (parallaxClass != String.Empty)
                        { imgHeight = 1600; }
                        else
                        { imgHeight = 700; }

                        break;
                }
            }

            string bgImage = String.Empty;

            if (Model.Content.HasValue("headerImage") && Umbraco.TypedMedia(Model.Content.GetProperty("headerImage").Value) != null)
            {
                bgImage = "style=\"background-image:url('" + Umbraco.TypedMedia(Model.Content.GetProperty("headerImage").Value).GetCropUrl(width: 1600, height: imgHeight) + "')\"";
            }

            string backgroundStyle = "c5-bg";
            string headingStyle = "c3-text";
            string textStyle = "c3-text";

            if (Model.Content.HasValue("headerBackgroundColor"))
            {
                switch (Model.Content.GetProperty("headerBackgroundColor").Value.ToString())
                {
                    case "ed6d19":
                        backgroundStyle = "c1-bg";
                        headingStyle = "c5-text";
                        textStyle = "c5-text";
                        break;
                    case "cccccc":
                        backgroundStyle = "c2-bg";
                        headingStyle = "c3-text";
                        textStyle = "c3-text";
                        break;
                    case "181818":
                        backgroundStyle = "c3-bg";
                        headingStyle = "c5-text";
                        textStyle = "c5-text";
                        break;
                    case "f4f4f4":
                        backgroundStyle = "c4-bg";
                        headingStyle = "c3-text";
                        textStyle = "c3-text";
                        break;
                    case "ffffff":
                        backgroundStyle = "c5-bg";
                        headingStyle = "c3-text";
                        textStyle = "c3-text";
                        break;
                    case "e3e3e3":
                        backgroundStyle = "c6-bg";
                        headingStyle = "c3-text";
                        textStyle = "c5-text";
                        break;
                    default:
                        backgroundStyle = "c5-bg";
                        headingStyle = "c3-text";
                        textStyle = "c3-text";
                        break;
                }
            }

            string buttonStyle = "c1-bg c5-text";

            if (Model.Content.HasValue("headerButtonColor"))
            {
                switch (Model.Content.GetProperty("headerButtonColor").Value.ToString())
                {
                    case "ed6d19":
                        buttonStyle = "c1-bg c5-text";
                        break;
                    case "cccccc":
                        buttonStyle = "c2-bg c3-text";
                        break;
                    case "181818":
                        buttonStyle = "c3-bg c5-text";
                        break;
                    case "f4f4f4":
                        buttonStyle = "c4-bg c3-text";
                        break;
                    case "ffffff":
                        buttonStyle = "c5-bg c1-text";
                        break;
                    case "e3e3e3":
                        buttonStyle = "c6-bg c5-text";
                        break;
                    default:
                        buttonStyle = "c1-bg c5-text";
                        break;
                }
            }

            LinkInfo bannerLink = USNStarterKit.USNBusinessLogic.USNUrlHelper.GetSingleUrlFromUrlPicker(Model.Content.GetPropertyValue<UrlPicker>("headerBannerLink"));

            <div class="item @bannerStyle @parallaxClass @backgroundStyle" @Html.Raw(bgImage)>
                @if (Model.Content.HasValue("headerImage") && Umbraco.TypedMedia(Model.Content.GetProperty("headerImage").Value) != null && bannerStyle != "takeover")
                {
                <div class="image hidden-lg hidden-md">
                    <img src="@Umbraco.TypedMedia(Model.Content.GetProperty("headerImage").Value).GetCropUrl(width: 1140, height: 600)" alt="@Model.Content.GetProperty("headerImageAltText").Value">
                </div>
                }
                @if (Model.Content.HasValue("headerHeading") || Model.Content.HasValue("headerText") || bannerLink != null)
                {
                    string textAlignment = "text-left";

                    if (Model.Content.HasValue("headerTextAlignment"))
                    {
                        switch (Model.Content.GetProperty("headerTextAlignment").Value.ToString())
                        {
                            case "Left":
                                textAlignment = "col-md-8 col-sm-10 col-sm-offset-1 col-xs-12 text-left";
                                break;
                            case "Center":
                                textAlignment = "col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12 text-center";
                                break;
                            case "Right":
                                textAlignment = "col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12 text-right";
                                break;
                            default:
                                textAlignment = "col-md-8 col-xs-12 text-left";
                                break;
                        }
                    }

                    <div class="info">
                        <div class="container">
                            <!-- ROW -->
                            <div class="row">

                                <div class="table">
				                    <div class="table-cell">

                                        <div class="@textAlignment @animateClass" data-os-animation="fadeInUp" data-os-animation-delay="0s">
                                            @if (Model.Content.HasValue("headerHeading"))
                                            {
                                                var bannerHeading = Model.Content.GetPropertyValue<USNHeading>("headerHeading");

                                                if (bannerHeading != null && !String.IsNullOrEmpty(bannerHeading.Heading))
                                                {
                                                    @Html.Raw("<" + bannerHeading.HeadingStyle + " class=\"heading main " + headingStyle + "\"  >")
                                                    @bannerHeading.Heading
                                                    @Html.Raw("</" + bannerHeading.HeadingStyle + ">")
                                                }
                                            }
                                            @if (Model.Content.HasValue("headerText"))
                                            {
                                                <div class="text @textStyle">
                                                    @Html.Raw(Model.Content.GetProperty("headerText").Value)
                                                </div>
                                            }
                                            @if (bannerLink != null)
                                            {
                                                <p class="link"><a class="btn @buttonStyle" href="@bannerLink.LinkURL" @Html.Raw(bannerLink.LinkTarget) @Html.Raw(bannerLink.LinkTitle)>@bannerLink.LinkCaption@Html.Raw(bannerLink.LinkIcon)</a></p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!--// ROW -->
                        </div>
                    </div>

                    if (Model.Content.GetPropertyValue<bool>("headerScrollPrompt"))
                    {
                        <!-- SCROLL PROMPT -->
                        <div class="scroll-prompt text-center">
                            <a class="c5-text hidden-lg"><i class="ion-ios-arrow-down"></i></a>
                            <a class="c5-text hidden-md hidden-sm hidden-xs"><div class="mouse-scroll"></div><span>@umbraco.library.GetDictionaryItem("USN Banner Component Scroll Prompt")</span></a>
                        </div>
                        <!--// SCROLL PROMPT -->
                    }
                }
            </div>
        }

    </section>
    <!--// BANNER -->

}
