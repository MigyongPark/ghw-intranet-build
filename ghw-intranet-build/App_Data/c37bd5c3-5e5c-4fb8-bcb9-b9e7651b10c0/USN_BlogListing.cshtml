@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@using USNStarterKit.USNBusinessLogic;
@using USNStarterKit.USNBlog;
	
@{
    var categoryFolder = Model.Content.Children.Where(x => x.IsDocumentType("USNBlogCategories")).First();

    // get item count
    int count = int.TryParse(Model.Content.GetProperty("blogListingPageSize").Value.ToString(), out count) ? count : 10;
    // get tag, category, or author from query string
    int page = int.TryParse(Request.QueryString["page"], out page) ? page : 1;
	int year = int.TryParse(Request.QueryString["year"], out year) ? year: 0;
    int month = int.TryParse(Request.QueryString["month"], out month) ? month: 0;

    string catID = Request.QueryString["category"];

    IEnumerable<IPublishedContent> posts = USNPostService.Instance.GetPosts(Model.Content, catID, page - 1, count, month, year);

    // get landing node
    var landing = USNDataService.Instance.GetLanding(Model.Content);

    // only get posts where the path has the landing node's id.
    posts = posts.Where(x => x.Path.Contains(landing.Id + ","));

    IEnumerable<IPublishedContent> nodes = posts.Take(count).ToList();

    int postCount = USNPostService.Instance.GetPosts(Model.Content, catID, 0, int.MaxValue, month, year).Count();

    int summaryTextLength = 0;

    if (Model.Content.HasValue("blogSummaryTextCharacterCount"))
    {
        summaryTextLength = Convert.ToInt32(Model.Content.GetProperty("blogSummaryTextCharacterCount").Value);
    }

    if (!Model.Content.GetPropertyValue<Boolean>("displayHeaderImageSection"))
    {
    
        if (String.IsNullOrEmpty(catID))
        { 
            <h1>@Umbraco.Field("onPageTitle", altFieldAlias: "pageName")</h1>
        }
        else
        {
            var catPage = Umbraco.TypedContent(Convert.ToInt32(catID));
            if (catPage.HasValue("categoryPageTitle"))
            {
                <h1>@catPage.GetProperty("categoryPageTitle").Value</h1>
            }
            else
            { 
                <h1>@catPage.Name</h1>
            }
        }
        
    }

    //Only display blog page content on first page
    if (page == 1)
    { 
        if(String.IsNullOrEmpty(catID) && String.IsNullOrEmpty(Request.QueryString["year"]))
        { 
            <!-- IMAGE -->
	        @Html.Partial("USNMiscPageElements/USN_MainImage",@Model)
	        <!--// IMAGE -->
	       
	        @Umbraco.Field("bodyText")
        }
        else if (!String.IsNullOrEmpty(catID) && String.IsNullOrEmpty(Request.QueryString["year"]))
        {
            var catPage = Umbraco.TypedContent(Convert.ToInt32(catID));
            @Umbraco.Field(catPage,"categoryIntroduction")
        }
    }
    
    if (posts.Count() > 0)
    {       
    <!-- LISTING -->
	<div class="listing blog">     
        @foreach (IPublishedContent n in nodes)
        {
            Boolean displaySummaryText = false;
            string introText = "";

            if (n.HasValue("pageSummary"))
            {
                introText = n.GetProperty("pageSummary").Value.ToString();
                displaySummaryText = true;
            }
            else if (summaryTextLength > 0 && n.IsDocumentType("USNStandardPageBlogPost"))
            { 

                    introText = library.StripHtml(n.GetProperty("bodyText").Value.ToString());
                    
                    displaySummaryText = true;

                    
                    if (introText.Length >= summaryTextLength)
                    {
                        introText = introText.Substring(0, summaryTextLength);
                    }

                    if (introText.Length > 0)
                    {
                        introText = "<p>" + introText + " ...</p>";
                    }

            }
                
		    <div class="item" itemscope itemtype="http://schema.org/BlogPosting">
                <a href="@n.Url" itemprop="url">
                    @{

                        string postName = "";

                        if (n.HasValue("onPageTitle"))
                        {
                            postName = n.GetProperty("onPageTitle").Value.ToString();
                        }
                        else
                        {
                            postName = n.Name;
                        }

                        if (n.HasValue("pageListingImage") && Umbraco.TypedMedia(n.GetProperty("pageListingImage").Value) != null)
                        {
                           
                            <div class="image"><img src="@Umbraco.TypedMedia(n.GetProperty("pageListingImage").Value).GetCropUrl(width: 1140, height: 550)" alt="@n.GetProperty("pageListingImageAltText").Value" itemprop="image"></div>
                        }

                    }
                    <p class="heading" itemprop="name headline">
                        @postName
                    </p>
                </a>

                <div class="info">
                   
                        @if (displaySummaryText)
                        {
                            <div class="text" itemprop="articleBody">@Html.Raw(introText)</div>
                        }
                </div>
                @Html.Partial("USNBlog/USN_BlogMeta", @n) 
            </div>
        }
    </div>
				
        // pagination
        @RenderPagination(page, postCount, count)
    }
    else
    {
        <p>@umbraco.library.GetDictionaryItem("USN Blog Nothing Found")</p>
    }

 }

@helper RenderPagination(int page, int postCount, int itemsPerPage)
{
    int pages = (int)Math.Ceiling((double)postCount / (double)itemsPerPage);

    string url = Request.Url.ToString();
    string querystring = Request.Url.Query;

    int pagesPerGroup = 10;

    if (pages > 1)
    {
        <nav id="pagination" class="text-center">
            <ul class="pagination">
                @* render prev link *@
                @if (page > 1)
                {
                    url = url.ReplaceQueryStringItem("page", (page - 1).ToString());
                    <li class="prev">
                        <a href="@url" aria-label="Previous" title="@umbraco.library.GetDictionaryItem("USN Listing Navigation Previous")"><i class="ion-chevron-left"></i><span class="hidden">@umbraco.library.GetDictionaryItem("USN Listing Navigation Previous")</span></a>
                    </li>

                    if (page > pagesPerGroup)
                    {
                        if (page % pagesPerGroup == 0)
                        {
                            url = url.ReplaceQueryStringItem("page", (page - pagesPerGroup).ToString());
                        }
                        else
                        {
                            url = url.ReplaceQueryStringItem("page", ((page / pagesPerGroup) * pagesPerGroup).ToString());
                        }

                        <li class="hidden-xs"><a href="@url">...</a></li>
                    }
                }
                @* render page links *@
                @{
                int pagesCount = 0;
                int startPage = 1;


                if (page <= pagesPerGroup)
                {
                    startPage = 1;
                }
                else if (page % pagesPerGroup > 0)
                {
                    startPage = page - (page % pagesPerGroup) + 1;
                }
                else if (page % pagesPerGroup == 0)
                {
                    startPage = (page - pagesPerGroup) + 1;
                }

                for (int i = startPage; i < pages + 1; i++)
                {
                    if (pagesCount == pagesPerGroup)
                    {
                        break;
                    }
                    url = url.ReplaceQueryStringItem("page", i.ToString());
                    string pageClass = i == page ? "active" : string.Empty;

                    <li class="hidden-xs @pageClass">
                        @if (page == i)
                        {
                            <a href="@url" class="disabled">@i<span class="sr-only">(current)</span></a>
                        }
                        else
                        {
                            <a href="@url">@i</a>
                        }
                    </li>

                        pagesCount += 1;
                }

                }
                @{

                int totalGroups = 0;

                if (pages % pagesPerGroup == 0)
                {
                    totalGroups = pages / pagesPerGroup;
                }
                else
                {
                    totalGroups = pages / pagesPerGroup + 1;
                }

                int currentGroup = 0;

                if (page % pagesPerGroup == 0)
                {
                    currentGroup = page / pagesPerGroup;
                }
                else
                {
                    currentGroup = page / pagesPerGroup + 1;
                }


                if (totalGroups != currentGroup)
                {

                    if (page % pagesPerGroup == 0)
                    {
                        url = url.ReplaceQueryStringItem("page", (page + 1).ToString());
                    }
                    else
                    {
                        int liPageNumber = (((page / pagesPerGroup) + 1) * pagesPerGroup) + 1;
                        url = url.ReplaceQueryStringItem("page", liPageNumber.ToString());
                    }

                    <li class="hidden-xs">
                        <a href="@url">...</a>
                    </li>
                }
                }

                @if (page < Math.Ceiling((double)postCount / itemsPerPage))
                {
                    url = url.ReplaceQueryStringItem("page", (page + 1).ToString());
                    @* render next link *@
                    <li class="next">
                        <a href="@url" aria-label="Next" title="@umbraco.library.GetDictionaryItem("USN Listing Navigation Next")"><span class="hidden">@umbraco.library.GetDictionaryItem("USN Listing Navigation Next")</span><i class="ion-chevron-right"></i></a>
                    </li>
                }
            </ul>

        </nav>
    }
}